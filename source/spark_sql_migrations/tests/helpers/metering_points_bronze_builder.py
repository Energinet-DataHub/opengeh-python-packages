from package.enums.metering_points.accepted_enum import AcceptedEnum
from package.schemas.bronze.metering_points_bronze_schema import (
    metering_points_bronze_schema,
)
from pyspark.sql import SparkSession
from datetime import datetime
from pyspark.sql.dataframe import DataFrame
from .metering_point_defaults import MeteringPointDefaults
from typing import Any

date_time_formatting_string = "%Y-%m-%dT%H:%M:%S%z"

default_date = datetime.strptime("2020-01-01T23:00:00+0000", date_time_formatting_string)


class MeteringPointsBronzeBuilder:
    def create_connection_register_row(
        self,
        btd_business_trans_doss_id: int = MeteringPointDefaults.btd_business_trans_doss_id,
        metering_point_state_id: int = MeteringPointDefaults.metering_point_state_id,
        metering_grid_area_id: str = MeteringPointDefaults.metering_grid_area_id,
        type_of_mp: str = MeteringPointDefaults.type_of_mp,
        meter_reading_occurrence: str = MeteringPointDefaults.meter_reading_occurrence,
        valid_from_date: datetime = default_date,
        balance_supplier_id: str = MeteringPointDefaults.balance_supplier_id,
        physical_status_of_mp: str = MeteringPointDefaults.physical_status_of_mp,
        balance_supplier_start_date: datetime = default_date,
        balance_responsible_party_id: str = MeteringPointDefaults.balance_responsible_party_id,
        balance_resp_party_start_date: datetime = default_date,
    ) -> dict[str, Any]:
        return {
            "VALID_FROM_DATE": valid_from_date,
            "VALID_TO_DATE": default_date,
            "BTD_BUSINESS_TRANS_DOSS_ID": btd_business_trans_doss_id,
            "CREATED_TIMESTAMP": "2016-08-05T13:38:01.539000",
            "METERING_POINT_STATE_ID": metering_point_state_id,
            "ASSET_TYPE": None,
            "BLOCKED_FOR_LINKING": "0",
            "CONSUMER_CATEGORY": "111",
            "DISCONNECTION_TYPE": "D02",
            "ENERGY_TIMESERIES_MEASURE_UNIT": "KWH",
            "FROM_GRID_AREA": None,
            "FUEL_TYPE": None,
            "METERING_GRID_AREA_ID": metering_grid_area_id,
            "METERING_POINT_SUB_TYPE": None,
            "MP_CAPACITY": None,
            "MP_CONNECTION_TYPE": None,
            "NET_SETTLEMENT_GROUP": "0",
            "PARENT_METERING_POINT_ID": None,
            "PHYSICAL_METERING_POINT": "1",
            "PHYSICAL_STATUS_OF_MP": physical_status_of_mp,
            "POWER_LIMIT_A": 90,
            "POWER_LIMIT_KW": 3500,
            "POWER_PLANT_GSRN": None,
            "PRODUCT": "8716867000030",
            "PRODUCT_OBLIGATION": None,
            "PSO_EXEMPT": None,
            "SUB_TYPE_OF_MP": "D01",
            "TO_GRID_AREA": None,
            "TYPE_OF_MP": type_of_mp,
            "CONSUMER_CVR": "11111111",
            "DATA_ACCESS_CVR": "11111111",
            "FIRST_CONSUMER_PARTY_NAME": "Christopher Hitchens",
            "FIRST_CONSUMER_PARTY_REF": None,
            "PROTECTED_NAME": None,
            "SECOND_CONSUMER_PARTY_NAME": None,
            "SECOND_CONSUMER_PARTY_REF": None,
            "WEB_ACCESS_CODE": "ABCD1234",
            "TAX_REDUCTION": "1",
            "TAX_SETTLEMENT_DATE": "2015-12-31T23:00:00",
            "ESTIMATED_ANNUAL_VOLUME": 0,
            "LOCATION_BUILDING_NUMBER": "1",
            "LOCATION_CITY_NAME": "Groningen",
            "LOCATION_CITY_SUBDIVISION_NAME": "Hoogkerk",
            "LOCATION_COUNTRY_NAME": "DK",
            "LOCATION_DAR_REFERENCE": None,
            "LOCATION_FLOOR_ID": "2",
            "LOCATION_LOCATION_DESCRIPTION": "Behind the Kitchen Door",
            "LOCATION_MP_ADDRESS_WASH_INSTRUCTIONS": "D01",
            "LOCATION_MUNICIPALITY_CODE": "108",
            "LOCATION_POSTCODE": "9745",
            "LOCATION_ROOM_ID": None,
            "LOCATION_STREET_CODE": "1233",
            "LOCATION_STREET_NAME": "Eemsgolaan",
            "HOURLY_TIME_SERIES": None,
            "MP_READING_CHARACTERISTICS": None,
            "SCHEDULED_METER_READING_DATE01": None,
            "SCHEDULED_METER_READING_DATE02": None,
            "SCHEDULED_METER_READING_DATE03": None,
            "SCHEDULED_METER_READING_DATE04": None,
            "SCHEDULED_METER_READING_DATE05": None,
            "SCHEDULED_METER_READING_DATE06": None,
            "SCHEDULED_METER_READING_DATE07": None,
            "SCHEDULED_METER_READING_DATE08": None,
            "SCHEDULED_METER_READING_DATE09": None,
            "SCHEDULED_METER_READING_DATE10": None,
            "SCHEDULED_METER_READING_DATE11": None,
            "SCHEDULED_METER_READING_DATE12": None,
            "SUBMISSION_DELAY": None,
            "METER_COUNTER_DIGITS": "6.3",
            "METER_COUNTER_MULTIPLY_FACTOR": 1,
            "METER_COUNTER_TYPE": "D02",
            "METER_COUNTER_UNIT": "KWH",
            "METER_NUMBER": "685183",
            "FIRST_CONSUMER_CPR": None,
            "SECOND_CONSUMER_CPR": None,
            "BALANCE_RESPONSIBLE_PARTY_ID": balance_responsible_party_id,
            "BALANCE_RESP_PARTY_START_DATE": balance_resp_party_start_date,
            "BALANCE_SUPPLIER_ID": balance_supplier_id,
            "BALANCE_SUPPLIER_START_DATE": balance_supplier_start_date,
            "METER_READING_OCCURRENCE": meter_reading_occurrence,
            "SETTLEMENT_METHOD": "E02",
            "CONTACT_1_MPT_METERING_POINT_CONTACT_ID": None,
            "CONTACT_1_ADDRESS_CODE": None,
            "CONTACT_1_ATTENTION": None,
            "CONTACT_1_BUILDING_NUMBER": None,
            "CONTACT_1_CITY_NAME": None,
            "CONTACT_1_CITY_SUBDIVISION_NAME": None,
            "CONTACT_1_CONTACT_NAME1": None,
            "CONTACT_1_CONTACT_NAME2": None,
            "CONTACT_1_COUNTRY_NAME": None,
            "CONTACT_1_DAR_REFERENCE": None,
            "CONTACT_1_EMAIL_ADDRESS": None,
            "CONTACT_1_FLOOR_ID": None,
            "CONTACT_1_MOBILE_NUMBER": None,
            "CONTACT_1_MUNICIPALITY_CODE": None,
            "CONTACT_1_PHONE_NUMBER": None,
            "CONTACT_1_POSTCODE": None,
            "CONTACT_1_POST_BOX": None,
            "CONTACT_1_PROTECTED_ADDRESS": None,
            "CONTACT_1_ROOM_ID": None,
            "CONTACT_1_SAME_AS_MP_ADDRESS": None,
            "CONTACT_1_STREET_CODE": None,
            "CONTACT_1_STREET_NAME": None,
            "CONTACT_2_MPT_METERING_POINT_CONTACT_ID": None,
            "CONTACT_2_ADDRESS_CODE": None,
            "CONTACT_2_ATTENTION": None,
            "CONTACT_2_BUILDING_NUMBER": None,
            "CONTACT_2_CITY_NAME": None,
            "CONTACT_2_CITY_SUBDIVISION_NAME": None,
            "CONTACT_2_CONTACT_NAME1": None,
            "CONTACT_2_CONTACT_NAME2": None,
            "CONTACT_2_COUNTRY_NAME": None,
            "CONTACT_2_DAR_REFERENCE": None,
            "CONTACT_2_EMAIL_ADDRESS": None,
            "CONTACT_2_FLOOR_ID": None,
            "CONTACT_2_MOBILE_NUMBER": None,
            "CONTACT_2_MUNICIPALITY_CODE": None,
            "CONTACT_2_PHONE_NUMBER": None,
            "CONTACT_2_POSTCODE": None,
            "CONTACT_2_POST_BOX": None,
            "CONTACT_2_PROTECTED_ADDRESS": None,
            "CONTACT_2_ROOM_ID": None,
            "CONTACT_2_SAME_AS_MP_ADDRESS": None,
            "CONTACT_2_STREET_CODE": None,
            "CONTACT_2_STREET_NAME": None,
            "CONTACT_3_MPT_METERING_POINT_CONTACT_ID": None,
            "CONTACT_3_ADDRESS_CODE": None,
            "CONTACT_3_ATTENTION": None,
            "CONTACT_3_BUILDING_NUMBER": None,
            "CONTACT_3_CITY_NAME": None,
            "CONTACT_3_CITY_SUBDIVISION_NAME": None,
            "CONTACT_3_CONTACT_NAME1": None,
            "CONTACT_3_CONTACT_NAME2": None,
            "CONTACT_3_COUNTRY_NAME": None,
            "CONTACT_3_DAR_REFERENCE": None,
            "CONTACT_3_EMAIL_ADDRESS": None,
            "CONTACT_3_FLOOR_ID": None,
            "CONTACT_3_MOBILE_NUMBER": None,
            "CONTACT_3_MUNICIPALITY_CODE": None,
            "CONTACT_3_PHONE_NUMBER": None,
            "CONTACT_3_POSTCODE": None,
            "CONTACT_3_POST_BOX": None,
            "CONTACT_3_PROTECTED_ADDRESS": None,
            "CONTACT_3_ROOM_ID": None,
            "CONTACT_3_SAME_AS_MP_ADDRESS": None,
            "CONTACT_3_STREET_CODE": None,
            "CONTACT_3_STREET_NAME": None,
            "CONTACT_4_MPT_METERING_POINT_CONTACT_ID": None,
            "CONTACT_4_ADDRESS_CODE": None,
            "CONTACT_4_ATTENTION": None,
            "CONTACT_4_BUILDING_NUMBER": None,
            "CONTACT_4_CITY_NAME": None,
            "CONTACT_4_CITY_SUBDIVISION_NAME": None,
            "CONTACT_4_CONTACT_NAME1": None,
            "CONTACT_4_CONTACT_NAME2": None,
            "CONTACT_4_COUNTRY_NAME": None,
            "CONTACT_4_DAR_REFERENCE": None,
            "CONTACT_4_EMAIL_ADDRESS": None,
            "CONTACT_4_FLOOR_ID": None,
            "CONTACT_4_MOBILE_NUMBER": None,
            "CONTACT_4_MUNICIPALITY_CODE": None,
            "CONTACT_4_PHONE_NUMBER": None,
            "CONTACT_4_POSTCODE": None,
            "CONTACT_4_POST_BOX": None,
            "CONTACT_4_PROTECTED_ADDRESS": None,
            "CONTACT_4_ROOM_ID": None,
            "CONTACT_4_SAME_AS_MP_ADDRESS": None,
            "CONTACT_4_STREET_CODE": None,
            "CONTACT_4_STREET_NAME": None,
        }

    def create_business_transaction_dossier_row(
        self,
        dossier_status: str = MeteringPointDefaults.default_dossier_status,
        accepted: str = MeteringPointDefaults.accepted,
        bus_trans_doss_id: int = MeteringPointDefaults.bus_trans_doss_id,
        bus_trans_doss_step_id: int = MeteringPointDefaults.bus_trans_doss_step_id,
        current_step_status: str = MeteringPointDefaults.current_step_status,
        step_type: str = MeteringPointDefaults.step_type,
        effectuation_date: datetime = default_date,
        transaction_type: str = MeteringPointDefaults.transaction_type,
    ) -> dict[str, Any]:
        return {
            "ACCEPTED": accepted,
            "BALANCE_SUPPLIER_ID": None,
            "BUS_TRANS_DOSS_ID": bus_trans_doss_id,
            "CREATED_DATE": default_date,
            "DOSSIER_STATUS": dossier_status,
            "EFFECTUATION_DATE": effectuation_date,
            "BTD_ENERGY_BUSINESS_PROCESS": None,
            "FINISHED_DATE": default_date,
            "LAST_UPDATED_TIMESTAMP": default_date,
            "METERING_POINT_ID": "570500000000000041",
            "TRANSACTION_TYPE": transaction_type,
            "btd_steps": [
                {
                    "BUS_TRANS_DOSS_STEP_ID": bus_trans_doss_step_id,
                    "CURRENT_STEP_STATUS": current_step_status,
                    "BTDS_ENERGY_BUSINESS_PROCESS": None,
                    "MESSAGE_ID": "3aab4f4098ae4461908b0c4daf79bb13",
                    "BTDS_METERING_POINT_ID": "570500000000000041",
                    "ORIG_MESSAGE_ID": None,
                    "ORIG_TRANSACTION_ID": None,
                    "RECEIVER_ID": "5790001330552",
                    "RECEIVER_ROLE": "DDZ",
                    "RECEIVER_ROLE_TYPE": None,
                    "SENDER_ID": "5790001330583",
                    "SENDER_ROLE": "FAS",
                    "STEP_TYPE": step_type,
                    "TRANSACTION_ID": None,
                },
            ],
        }

    def create_metering_point_row(
        self,
        connection_register: list[Any] = [],
        rescued_data: str | None = MeteringPointDefaults.rescued_data,
        metering_point: str = MeteringPointDefaults.metering_point_id,
        created: datetime = datetime.now(),
        modified: datetime = datetime.now(),
        dossier_status: str = MeteringPointDefaults.default_dossier_status,
        accepted: str = MeteringPointDefaults.accepted,
        bus_trans_doss_id: int = MeteringPointDefaults.bus_trans_doss_id,
        bus_trans_doss_step_id: int = MeteringPointDefaults.bus_trans_doss_step_id,
        current_step_status: str = MeteringPointDefaults.current_step_status,
        step_type: str = MeteringPointDefaults.step_type,
        effectuation_date: datetime = default_date,
        transaction_type: str = MeteringPointDefaults.transaction_type,
        with_unaccepted_business_transaction_dossier: bool = False,
        effectuation_date_for_unaccepted_business_transaction_dossier: datetime = default_date,
        file_path: str = "",
    ) -> dict[str, Any]:
        if len(connection_register) == 0:
            connection_register = [self.create_connection_register_row()]

        business_transaction_dossiers = [
            self.create_business_transaction_dossier_row(
                dossier_status=dossier_status,
                accepted=accepted,
                bus_trans_doss_id=bus_trans_doss_id,
                bus_trans_doss_step_id=bus_trans_doss_step_id,
                current_step_status=current_step_status,
                step_type=step_type,
                effectuation_date=effectuation_date,
                transaction_type=transaction_type,
            )
        ]

        if with_unaccepted_business_transaction_dossier is True:
            business_transaction_dossiers.append(
                self.create_business_transaction_dossier_row(
                    dossier_status=dossier_status,
                    accepted=AcceptedEnum.A0.value,
                    bus_trans_doss_id=bus_trans_doss_id,
                    bus_trans_doss_step_id=bus_trans_doss_step_id,
                    current_step_status=current_step_status,
                    step_type=step_type,
                    effectuation_date=effectuation_date_for_unaccepted_business_transaction_dossier,
                    transaction_type=transaction_type,
                )
            )

        dc = {
            "metering_point": {"metering_point_id": metering_point},
            "connection_register": connection_register,
            "business_transaction_dossiers": business_transaction_dossiers,
            "_rescued_data": rescued_data,
            "created": created,
            "modified": modified,
            "validate_closed_metering_points": False,
            "file_path": file_path,
        }

        return dc

    def build(
        self,
        spark: SparkSession,
        connection_register: list[Any] = [],
        metering_points: list[Any] = [],
    ) -> DataFrame:
        if len(connection_register) == 0:
            connection_register = [self.create_connection_register_row()]

        if len(metering_points) == 0:
            dc = [self.create_metering_point_row(connection_register=connection_register)]
        else:
            dc = metering_points

        return spark.createDataFrame(dc, schema=metering_points_bronze_schema)
