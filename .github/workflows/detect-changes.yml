name: Detect changes

# DESCRIPTION:
# This workflow will determine which categories of jobs should be executed,
# based on detected changes.
# It should be used by the 'ci-orchestrator.yml' to ensure they both use
# the same path's to detect changes

on:
  workflow_call:
    outputs:
      telemetry:
        value: ${{ jobs.changes.outputs.telemetry }}
      spark_sql_migrations:
        value: ${{ jobs.changes.outputs.spark_sql_migrations }}
      docker:
        value: ${{ jobs.changes.outputs.docker }}
      docker_in_commit:
        value: ${{ jobs.changes.outputs.docker_in_commit }}
      pyspark_slim:
        value: ${{ jobs.changes.outputs.pyspark_slim }}

jobs:
  changes:
    name: Determine relevant jobs
    runs-on: ubuntu-latest
    outputs:
      telemetry: ${{ steps.filter.outputs.telemetry }}
      spark_sql_migrations: ${{ steps.filter.outputs.spark_sql_migrations }}
      docker: ${{ steps.filter.outputs.docker }}
      docker_in_commit: ${{ steps.docker_changed.outputs.any_changed }}
      pyspark_slim: ${{ steps.filter.outputs.pyspark_slim }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Detect file changes
        uses: dorny/paths-filter@v2
        id: filter
        with:
          filters: |
            telemetry:
              - 'source/telemetry/**'
            telemetry_release_notes:
              - 'source/telemetry/release-notes/release-notes.md'
            spark_sql_migrations:
              - 'source/spark_sql_migrations/**'
            spark_sql_migrations_release_notes:
              - 'source/spark_sql_migrations/release-notes/release-notes.md'
            docker:
              - .docker/**
            pyspark_slim:
              - 'container-images/pyspark-slim/**'

      - name: Package content or build has changed
        id: docker_changed
        uses: tj-actions/changed-files@v41
        with:
          since_last_remote_commit: true
          files: .docker/**

  release_notes:
    needs: changes
    runs-on: ubuntu-latest
    strategy:
      matrix:
        services:
          [
            { packageName: telemetry, changed: ${{ steps.filter.outputs.telemetry }}, releaseNotesChanged: ${{ steps.filter.outputs.telemetry_release_notes }} },
            { packageName: spark_sql_migrations, changed: ${{ steps.filter.outputs.spark_sql_migrations }}, releaseNotesChanged: ${{ steps.filter.outputs.spark_sql_migrations_release_notes }} }
          ]
      max-parallel: 1
    steps:
      - name: Check if release notes have been updated
        run: |
          if [ "${{ matrix.services.changed }}" = "true" ] && [ "${{ matrix.services.releaseNotesUpdated }}" = "false" ]; then
            echo "Release notes have NOT been updated for ${{ matrix.packages.packageName }}. They need to be updated."
            exit 1
          fi
