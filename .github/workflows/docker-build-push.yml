# Copyright 2020 Energinet DataHub A/S
#
# Licensed under the Apache License, Version 2.0 (the "License2");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

on:
  workflow_call:
    inputs:
      context:
        description: The context of the workflow
        type: string
        required: true
      image_name:
        description: The name of the image to build and push
        type: string
        required: true
      image_tag:
        description: The tag of the image to build and push
        type: string
        required: true
      dockerfile:
        description: Path to the Dockerfile. (default {context}/Dockerfile)
        type: string
        required: False
        default: ""
      registry:
        description: The registry to push the image to
        type: string
        required: False
        default: ghcr.io
      organization:
        description: The organization to push the image to
        type: string
        required: False
        default: energinet-datahub
      build-args:
        description: The build arguments to pass to the Docker build
        type: string
        required: False
        default: ""

name: Docker Build and Push

permissions:
  contents: read
  packages: write

jobs:
  build_and_publish_image:
    runs-on: ubuntu-latest
    name: Build and Push ${{ inputs.image_name }}:${{ inputs.image_tag }}
    steps:
      - name: Set Dockerfile Path
        shell: bash
        id: set_dockerfile
        run: |
          if [ -z "${{ inputs.dockerfile }}" ]; then
            echo "DOCKERFILE_PATH=${{ inputs.context }}/Dockerfile" >> $GITHUB_OUTPUT
          else
            echo "DOCKERFILE_PATH=${{ inputs.dockerfile }}" >> $GITHUB_OUTPUT
          fi

      - name: Checkout repository
        uses: actions/checkout@v5

      - name: Check if ${{ inputs.image_name }} has changed
        uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            is_changed:
              - ${{ inputs.context }}/**
              - ${{ steps.set_dockerfile.outputs.DOCKERFILE_PATH }}

      - name: Check if PR is merged
        id: is_merged
        if: ${{ steps.changes.outputs.is_changed == 'true' }}
        run: |
          echo "push_image=FALSE" >> $GITHUB_OUTPUT
          if [[ "${{ github.event.pull_request.merged }}" == "true" ]]; then
            echo "push_image=TRUE" >> $GITHUB_OUTPUT
          fi

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        if: ${{ steps.changes.outputs.is_changed == 'true' }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        if: ${{ steps.changes.outputs.is_changed == 'true' }}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        if: ${{ steps.changes.outputs.is_changed == 'true' }}
        with:
          registry: ${{ inputs.registry }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Check Docker tag
        shell: bash
        id: check_tag
        if: ${{ steps.changes.outputs.is_changed == 'true' }}
        run: |
          IMAGE_FQN="${{ inputs.registry }}/${{ inputs.organization }}/${{ inputs.image_name }}"
          if [ ! -z "$(docker images -q ${IMAGE_FQN}:${{ inputs.image_tag }} 2> /dev/null)" ]; then
            echo "Image ${IMAGE_FQN}:${{ inputs.image_tag }} already exists"
            exit 1
          fi
          echo "IMAGE_FQN=${IMAGE_FQN}" >> $GITHUB_OUTPUT

      - name: Build and Push ${{ inputs.image_name }}:${{ inputs.image_tag }}
        uses: docker/build-push-action@v6
        if: ${{ steps.changes.outputs.is_changed == 'true' }}
        with:
          build-args: ${{ inputs.build-args }}
          context: container-images/pyspark-slim
          platforms: linux/amd64,linux/arm64
          push: ${{ steps.is_merged.outputs.push_image }}
          file: ${{ steps.set_dockerfile.outputs.DOCKERFILE_PATH }}
          tags: |
            ${{ steps.check_tag.outputs.IMAGE_FQN }}:${{ inputs.image_tag }}
            ${{ steps.check_tag.outputs.IMAGE_FQN }}:latest
